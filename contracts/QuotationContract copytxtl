pragma solidity ^0.5.0;
pragma experimental ABIEncoderV2;

contract QuotationContract {
    uint public quotationCount = 0; //estado do contato
    uint public taskCount = 0; //estado do contato
    struct Task {
        uint id;
        uint quoteId;
        bool priceable;
        int estimatedCost;
        string description;

    }
    struct Quotation {
        uint id;
        uint numTasks;
        string airplane;
        string repairItem;
        string obs;
        bool completed;


        string Content;
    }

    mapping(uint => Quotation) public quotations; //id da quotation
    mapping(uint => Task) public tasks; //id da task

    event QuotationCreated(uint id, int tasks, string airplane, string repairItem, string obs, bool completed);
    event TaskCreated(uint id, uint quoteId, bool priceable, int estimatedCost, string description);

    
    function createTask(uint _id, uint _qId , bool _priceable, int _cost, string memory _desc) public {
        taskCount++;
        tasks[_id] = Task(_id, _qId, _priceable, _cost, _desc);
        emit TaskCreated(_id, _qId, _priceable, _cost, _desc);
        
    }

    function createQuotation(string memory _airplane, string memory _item, string memory _obs, bool _completed) public {
        quotationCount++;
        quotations[quotationCount] = Quotation(quotationCount, 1, _airplane, _item, _obs, _completed);
        taskCount++;
        createTask(0, quotationCount, false, 0, "Quotation Created");
        emit QuotationCreated(quotationCount, 1, _airplane, _item, _obs, _completed);
        
    }
    
    function getQuotation(uint _id) public view returns(uint, string memory, string memory, bool) {
        return(quotations[_id].numTasks, quotations[_id].airplane, quotations[_id].repairItem,quotations[_id].completed);
    }
    
    
    function getTask(uint _id) public view returns(uint, bool, int, string memory) {
        return(tasks[_id].quoteId, tasks[_id].priceable, tasks[_id].estimatedCost, tasks[_id].description);
    }
    
}
